FROM osrf/ros:melodic-desktop-full

# Arguments
ARG USER=initial
ARG GROUP=initial
ARG UID=1000
ARG GID=${UID}
ARG SHELL=/bin/bash

# Replace apt urls
RUN sh -c '. /etc/lsb-release && echo "deb http://mirrors.sjtug.sjtu.edu.cn/ros/ubuntu/ `lsb_release -cs` main" > /etc/apt/sources.list.d/ros-latest.list'

# Install packages
RUN apt-get update && apt install -y --no-install-recommends software-properties-common

RUN apt-get update && add-apt-repository "deb http://security.ubuntu.com/ubuntu xenial-security main" && \
    apt-get install -y --no-install-recommends \
    wget curl ssh \
    zsh terminator gnome-terminal git vim tig \
    dbus-x11 libglvnd0 libgl1 libglx0 libegl1 libxext6 libx11-6 \
    unzip \
    yasm \
    pkg-config \
    libjpeg-dev \
    libtiff-dev \
    libjasper-dev \
    libpng-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libv4l-dev \
    libatlas-base-dev \
    gfortran \
    libtbb2 \
    libtbb-dev \
    libpq-dev \
    libpython-dev \
    gdb \
    rsync \
    libeigen3-dev \
    libpython2.7-dev \
  && apt-get clean \
  && rm -rf /var/lib/apt/lists/*

RUN mkdir -p /root/

WORKDIR /root/

RUN git clone https://github.com/opencv/opencv.git && git clone https://github.com/opencv/opencv_contrib.git

# install cmake
RUN apt install -y software-properties-common lsb-release && \
    wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null && \
    apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main" && \
     apt update &&  apt install -y --no-install-recommends cmake

RUN apt update && apt install -y --no-install-recommends build-essential libboost-all-dev

# # build eigen
# RUN wget https://gitlab.com/libeigen/eigen/-/archive/3.3.7/eigen-3.3.7.tar.gz && \
#     tar -xvzf eigen-3.3.7.tar.gz && cd eigen-3.3.7 && mkdir build && cd build && cmake .. && make install && \
#     cd ../../ && rm -rf eigen-3.3.7 && rm eigen-3.3.7.tar.gz

# OpenCV dependencies
RUN apt update && apt install -y --no-install-recommends libglew-dev \
    libgtest-dev \
    libgoogle-glog-dev \
    google-mock \
    libgflags-dev \
    libatlas-base-dev \
    libsuitesparse-dev \
    qtdeclarative5-dev \
    qt5-qmake \
    libqglviewer-dev-qt5

RUN apt update && apt install -y --no-install-recommends \
    pkg-config libgtk-3-dev \
    freeglut3-dev pkg-config \
    libxmu-dev libxi-dev \
    libflann-dev


RUN cd /root/opencv && git checkout 3.4 && cd ../opencv_contrib && git checkout 3.4 && \
    cd /root/opencv && mkdir build && cd build && \
    cmake \
	  -DBUILD_TIFF=ON \
	  -DBUILD_opencv_java=OFF \
      -DOPENCV_EXTRA_MODULES_PATH=/root/opencv_contrib/modules \
	  -DWITH_CUDA=OFF \
	  -DENABLE_AVX=ON \
	  -DWITH_OPENGL=ON \
	  -DWITH_OPENCL=ON \
	  -DWITH_IPP=ON \
	  -DWITH_TBB=ON \
	  -DWITH_EIGEN=ON \
	  -DWITH_V4L=ON \
	  -DBUILD_TESTS=OFF \
	  -DBUILD_PERF_TESTS=OFF \
	  -DCMAKE_BUILD_TYPE=RELEASE \
	  -DBUILD_opencv_python3=ON \
	  -DCMAKE_INSTALL_PREFIX=$(python3.6 -c "import sys; print(sys.prefix)") \
	  -DPYTHON_EXECUTABLE=$(which python3.6) \
	  -DPYTHON_INCLUDE_DIR=$(python3.6 -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())") \
	  -DPYTHON_PACKAGES_PATH=$(python3.6 -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())") .. \
    && make -j12 install \
    && cd /root/ && rm -rf opencv && rm -rf opencv_contrib

  #  \
  #   libgl1-mesa-dev libwayland-dev libxkbcommon-dev wayland-protocols libegl1-mesa-dev \
  #   libc++-dev libavcodec-dev libavutil-dev libavformat-dev libswscale-dev libavdevice-dev \
  #   libjpeg-dev libpng-dev

# build ceres
RUN cd /root/ && git clone https://ceres-solver.googlesource.com/ceres-solver && cd /root/ceres-solver/ && \
    git checkout 1.14.0 && \
    mkdir ceres-bin && \
    cd ceres-bin && \
    cmake .. && \
    make -j12 install && \
    cd /root/ && rm -rf ceres-solver

# build g2o
# RUN cd /root/ && git clone https://github.com/RainerKuemmerle/g2o.git && \
#     cd g2o && \
#     git checkout b1ba729 && \
#     mkdir build && \
#     cd build && \
#     cmake .. && \
#     make -j12 install && \
#     cd /root/ && rm -rf g2o

# Sophus
RUN cd /root/ && git clone http://github.com/strasdat/Sophus.git && \
    cd /root/Sophus/ && git checkout a621ff && \
    sed -i 's/unit_complex_.real() = 1.;/unit_complex_.real(1.);/' /root/Sophus/sophus/so2.cpp && \
    sed -i 's/unit_complex_.imag() = 0.;/unit_complex_.imag(0.);/' /root/Sophus/sophus/so2.cpp && \
    mkdir build && cd build && \
    cmake .. && make -j12 install

# vtk
# RUN cd /root && wget http://www.vtk.org/files/release/8.1/VTK-8.1.1.tar.gz && \
#     tar -zxvf VTK-8.1.1.tar.gz && \
#     cd VTK-8.1.1 && \
#     mkdir build && \
#     cd build && \
#     cmake .. && \
#     make -j12 install

# build pcl
# RUN cd /root/ && wget https://github.com/PointCloudLibrary/pcl/archive/refs/tags/pcl-1.10.0.tar.gz && \
#     tar xvzf pcl-1.10.0.tar.gz && cd pcl-pcl-1.10.0 && \
#     mkdir build && \
#     cd build && \
#     cmake .. && \
#     make -j12 install


# gtsam

# RUN cd /root/ && git clone https://github.com/borglab/gtsam.git && \
#     cd /root/gtsam/ && \
#     git checkout a738529af9754c7a085903f90ae8559bbaa82e75 && \
#     mkdir build && cd build && \
#     cmake -DGTSAM_POSE3_EXPMAP=ON -DGTSAM_ROT3_EXPMAP=ON -DGTSAM_USE_SYSTEM_EIGEN=ON .. && \
#     make -j12 && \
#     make install


# Pangolin
RUN cd /root/ && git clone https://github.com/stevenlovegrove/Pangolin.git && \
    cd /root/Pangolin/ && \
    git checkout v0.6 && \
    mkdir build && cd build && \
    cmake .. && \
    make -j12 install


# if glog report link error uncomment the following part:
# RUN cd /root/ && git clone https://github.com/google/glog.git && \
#     cd /root/glog/ && git checkout v0.5.0-rc2 && \
#     mkdir build && cd build && \
#     cmake .. && make -j12 install

# install yaml cpp
RUN apt install -y --no-install-recommends libyaml-cpp-dev python3-pip libboost-filesystem-dev libssl-dev mesa-utils python-wstool python-catkin-tools ros-melodic-cmake-modules protobuf-compiler autoconf libtool

RUN apt install -y --no-install-recommends libxtst6

# Env vars for the nvidia-container-runtime.
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES graphics,utility,compute

# change passwd
RUN echo 'root:password' | chpasswd

# modify the sshd_config
RUN sed -i 's/\#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config

RUN sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd

RUN echo 'export DISPLAY=:0' >> /etc/profile

ENV NOTVISIBLE "in users profile"

RUN echo "export VISIBLE=now" >> /etc/profile

RUN groupadd --gid 1000 work && \
    useradd --gid 1000 --uid 1000 -ms /bin/bash work

RUN echo 'work:password' | chpasswd

# copy entrypoint
COPY entrypoint.bash /entrypoint.bash
RUN chmod 777 /entrypoint.bash

RUN mkdir -p /home/work/.config/terminator
RUN mkdir -p /root/.config/terminator
COPY config/terminator/config /root/.config/terminator
COPY config/terminator/config /home/work/.config/terminator
RUN chown -R work:work /home/work/.config
RUN chown -R root:root /root/.config

USER work

# RUN pip3 install tqdm ruamel.yaml pyquaternion matplotlib tabulate

USER root

EXPOSE 22

ENTRYPOINT ["/entrypoint.bash", "terminator"]
